diff --git a/tools/libxc/include/xenguest.h b/tools/libxc/include/xenguest.h
index 0e510bb..d5333cd 100644
--- a/tools/libxc/include/xenguest.h
+++ b/tools/libxc/include/xenguest.h
@@ -107,7 +107,7 @@ int xc_domain_save(xc_interface *xch, int io_fd, uint32_t dom, uint32_t max_iter
 
 int xc_domain_enable_log_dirty(xc_interface *xch, uint32_t dom);
 
-int xc_domain_collect_dirty_logs(xc_interface *xch, uint32_t dom);
+int xc_domain_collect_dirty_logs(xc_interface *xch, uint32_t dom, xc_hypercall_buffer_t *dirty_bitmap);
 
 int xc_domain_disable_log_dirty(xc_interface *xch, uint32_t dom);
 
diff --git a/tools/libxc/xc_private.h b/tools/libxc/xc_private.h
index 524016a..fcc1931 100644
--- a/tools/libxc/xc_private.h
+++ b/tools/libxc/xc_private.h
@@ -268,7 +268,7 @@ static inline int do_domctl(xc_interface *xch, struct xen_domctl *domctl)
     if ( xc_hypercall_bounce_pre(xch, domctl) )
     {
         PERROR("Could not bounce buffer for domctl hypercall");
-        goto out1; 
+        //goto out1; 
     }
 
     ret = xencall1(xch->xcall, __HYPERVISOR_domctl,
@@ -281,13 +281,13 @@ static inline int do_domctl(xc_interface *xch, struct xen_domctl *domctl)
     }
 
     xc_hypercall_bounce_post(xch, domctl);
- out1:
+ //out1:
     return ret;
 }
 
 static inline int do_test_hypercall(xc_interface *xch, struct xen_domctl *domctl)
 {
-    int ret = -1;
+    int ret = -2;
     DECLARE_HYPERCALL_BOUNCE(domctl, sizeof(*domctl), XC_HYPERCALL_BUFFER_BOUNCE_BOTH);
     printf("\n %s:%d:%s\n",__FILE__,__LINE__,__func__);
 
@@ -296,7 +296,7 @@ static inline int do_test_hypercall(xc_interface *xch, struct xen_domctl *domctl
     if ( xc_hypercall_bounce_pre(xch, domctl) )
     {
         PERROR("Could not bounce buffer for domctl hypercall");
-        goto out1;
+       // goto out1;
     }
 
     ret = xencall1(xch->xcall, __HYPERVISOR_test_hypercall,
@@ -309,7 +309,7 @@ static inline int do_test_hypercall(xc_interface *xch, struct xen_domctl *domctl
     }
 
     xc_hypercall_bounce_post(xch, domctl);
- out1:
+ //out1:
     return ret;
 }
 
diff --git a/tools/libxc/xc_sr_save.c b/tools/libxc/xc_sr_save.c
index 030cd75..e4ecc30 100644
--- a/tools/libxc/xc_sr_save.c
+++ b/tools/libxc/xc_sr_save.c
@@ -477,6 +477,7 @@ static int send_memory_live(struct xc_sr_context *ctx)
     unsigned x;
     int rc;
 
+    printf("ctx->save.p2m_size : %lu",ctx->save.p2m_size);
     rc = update_progress_string(ctx, &progress_str, 0);
     if ( rc )
         goto out;
@@ -633,6 +634,25 @@ static int suspend_and_send_dirty(struct xc_sr_context *ctx)
     return rc;
 }
 
+int xc_domain_collect_dirty_logs(xc_interface *xch, uint32_t dom, xc_hypercall_buffer_t *dirty_bitmap)
+{
+    int rc;
+    DECLARE_DOMCTL;
+    //DECLARE_HYPERCALL_BUFFER_ARGUMENT(dirty_bitmap);
+    memset(&domctl, 0, sizeof(domctl));
+
+    domctl.cmd = XEN_DOMCTL_shadow_op;
+    domctl.domain = (domid_t)dom;
+    domctl.u.shadow_op.op     = XEN_DOMCTL_SHADOW_OP_PEEK;
+
+    rc = do_domctl(xch, &domctl); 
+    /*memcpy(dirty_bitmap, &domctl.u.shadow_op.dirty_bitmap,
+           sizeof(xc_hypercall_buffer_t));*/
+    printf("%s:%d:%s\n",__FILE__,__LINE__,__func__,&domctl.u.shadow_op.dirty_bitmap);
+
+    return rc;
+}
+
 static int verify_frames(struct xc_sr_context *ctx)
 {
     xc_interface *xch = ctx->xch;
@@ -928,19 +948,6 @@ int xc_domain_enable_log_dirty(xc_interface *xch, uint32_t dom)
     return rc;
 }
 
-int xc_domain_collect_dirty_logs(xc_interface *xch, uint32_t dom)
-{
-    int rc;
-    DECLARE_DOMCTL;
-    memset(&domctl, 0, sizeof(domctl));
-    domctl.cmd = XEN_DOMCTL_shadow_op;
-    domctl.domain = (domid_t)dom;
-    domctl.u.shadow_op.op     = XEN_DOMCTL_SHADOW_OP_COLLECT_DIRTY_LOGS;
-    rc = do_test_hypercall(xch, &domctl);
-    printf("\n%s:%d:%s,%d\n",__FILE__,__LINE__,__func__,rc);
-    return rc;
-}
-
 int xc_domain_disable_log_dirty(xc_interface *xch, uint32_t dom)
 {
     int rc;
diff --git a/tools/libxl/libxl_save_helper.c b/tools/libxl/libxl_save_helper.c
index 6e4663b..310f7e0 100644
--- a/tools/libxl/libxl_save_helper.c
+++ b/tools/libxl/libxl_save_helper.c
@@ -37,6 +37,7 @@
 #include "libxl_osdeps.h"
 
 #include <stdlib.h>
+#include <stdio.h>
 #include <unistd.h>
 #include <assert.h>
 #include <inttypes.h>
@@ -244,7 +245,7 @@ int main(int argc, char **argv)
 #define NEXTARG (++argv, assert(*argv), *argv)
 
     const char *mode = *++argv;
-    assert(mode);
+    assert(mode); 
 
     if (!strcmp(mode,"--save-domain")) {
 
@@ -318,10 +319,18 @@ int main(int argc, char **argv)
 
     } else if (!strcmp(mode,"--collect_dirty_logs")) {
         uint32_t dom =                      strtoul(NEXTARG,0,10);
+
         startup("collect");
-        r = xc_domain_collect_dirty_logs(xch, dom);  
-        complete(r);      
 
+        xc_hypercall_buffer_t *dirty_bitmap=NULL;
+        r = xc_domain_collect_dirty_logs(xch, dom, dirty_bitmap); 
+
+        char *home=getenv("HOME"), name[]="/logs.txt", *path=strcat(home,name);
+        FILE *file=fopen(path,"a");
+        fclose(file);
+
+        complete(r);      
+        
     } else {
         assert(!"unexpected mode argument");
     }
diff --git a/tools/libxl/xl_cmdimpl.c b/tools/libxl/xl_cmdimpl.c
index e187b06..91c00dd 100644
--- a/tools/libxl/xl_cmdimpl.c
+++ b/tools/libxl/xl_cmdimpl.c
@@ -4641,7 +4641,7 @@ static void migrate_domain(uint32_t domid, const char *rune, int debug,
             goto failed_suspend;
         else
             goto failed_resume;
-    }
+    } 
 
     //fprintf(stderr, "migration sender: Transfer complete.\n");
     // Should only be printed when debugging as it's a bit messy with
@@ -5055,7 +5055,6 @@ int main_migrate(int argc, char **argv)
         {"live", 0, 0, 0x200},
         COMMON_LONG_OPTS
     };
-
     SWITCH_FOREACH_OPT(opt, "FC:s:e", opts, "migrate", 2) {
     case 'C':
         config_filename = optarg;
diff --git a/xen/arch/x86/hvm/vmx/vmcs.c b/xen/arch/x86/hvm/vmx/vmcs.c
index 2872214..bc3b84f 100644
--- a/xen/arch/x86/hvm/vmx/vmcs.c
+++ b/xen/arch/x86/hvm/vmx/vmcs.c
@@ -1494,7 +1494,7 @@ void vmx_vcpu_flush_pml_buffer(struct vcpu *v)
     else
         pml_idx++;
 
-    printk("%lu -------- avant \n",pml_idx);
+    //printk("%lu -------- avant \n",pml_idx);
     for ( ; pml_idx < NR_PML_ENTRIES; pml_idx++ )
     {
         unsigned long gfn = pml_buf[pml_idx] >> PAGE_SHIFT;
@@ -1511,7 +1511,7 @@ void vmx_vcpu_flush_pml_buffer(struct vcpu *v)
         p2m_change_type_one(v->domain, gfn, p2m_ram_logdirty, p2m_ram_rw);
         paging_mark_gfn_dirty(v->domain, gfn);
     }
-    printk("%lu -------- apres \n",pml_idx);
+    //printk("%lu -------- apres \n",pml_idx);
 
     unmap_domain_page(pml_buf);
 
diff --git a/xen/arch/x86/mm/paging.c b/xen/arch/x86/mm/paging.c
index 64bb260..e6c6fe0 100644
--- a/xen/arch/x86/mm/paging.c
+++ b/xen/arch/x86/mm/paging.c
@@ -361,7 +361,7 @@ void paging_mark_gfn_dirty(struct domain *d, unsigned long pfn)
     mfn=l1[decalage];
     l0=map_domain_page(mfn);
     l0[i1]++;
-    printk("%d:",(int)l0[i1]);
+    //printk("%d:",(int)l0[i1]);
     unmap_domain_page(l0);
 
     /*
@@ -371,7 +371,7 @@ void paging_mark_gfn_dirty(struct domain *d, unsigned long pfn)
     mfn=l1[decalage];
     l0=map_domain_page(mfn);
     l0[i1] = pfn;
-    printk("%d\n",(int)l0[i1]);
+    //printk("%d\n",(int)l0[i1]);
     unmap_domain_page(l0);
 
     d->arch.paging.log_dirty.dirty_count++;
@@ -394,13 +394,6 @@ out:
     return;
 }
 
-long paging_collect(struct domain *d)
-{
-    unsigned long *l=paging_map_log_dirty_bitmap(d);
-    unmap_domain_page(l);
-    return (long)l;
-}
-
 /* Mark a page as dirty */
 void paging_mark_dirty(struct domain *d, unsigned long guest_mfn)
 {
@@ -564,7 +557,7 @@ static int paging_log_dirty_op(struct domain *d,
                                                   pages >> 3, bytes)) != 0 )
                     {
                         rv = -EFAULT;
-                        goto out;
+                        goto out; 
                     }
                 }
                 pages += bytes << 3;
@@ -804,10 +797,6 @@ int  paging_domctl(struct domain *d, xen_domctl_shadow_op_t *sc,
     printk("%s:%d:%s\n",__FILE__,__LINE__,__func__);
         return paging_log_dirty_enable(d, 1);
 
-    case XEN_DOMCTL_SHADOW_OP_COLLECT_DIRTY_LOGS:
-        return paging_collect(d);
-        //break;
-
     case XEN_DOMCTL_SHADOW_OP_OFF:
         if ( (rc = paging_log_dirty_disable(d, resuming)) != 0 )
             return rc;
